openapi: 3.0.0
info:
  title: MERN Auth API
  version: 1.0.0
  description: Full Authentication API (Register, Login, Reset, etc.)

servers:
  - url: http://localhost:5000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication routes
  - name: Users
    description: User management routes

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '200':
          description: Reset link sent
        '404':
          description: Email not found

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  example: StrongPassword123!
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token

  /users:
    get:
      tags:
        - Users
      summary: Get all users (admin only)
      responses:
        '200':
          description: List of users

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User object

    put:
      tags:
        - Users
      summary: Update user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: Updated user
